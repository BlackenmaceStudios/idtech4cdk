/***********************************************************************

ai_monster_skullrebel.script

monster_skullrebel

***********************************************************************/

#define SKULLREBEL_RUNDISTANCE		192
#define SKULLREBEL_WALKTURN			65
object monster_skullrebel : monster_base {
	boolean		can_run;

	void		state_Begin();
	void		state_Idle();
	void		combat_melee();
	void		init();
		
	// torso anim states
	void		Torso_Idle();
	void		Torso_Pain();
	void		Torso_MeleeAttack();

	void		state_Killed();
	
	// legs anim states
	void		Legs_Idle();
	void		Legs_Walk();
	void		Legs_Run();

	// attacks
	float		check_attacks();
	void		do_attack( float attack_flags );
};

/***********************************************************************

	Torso animation control

***********************************************************************/

void monster_skullrebel::Torso_Idle() {
	idleAnim( ANIMCHANNEL_TORSO, "idle" );
	
	while( !AI_PAIN ) {
		waitFrame();
	}
	
	animState( ANIMCHANNEL_TORSO, "Torso_Pain", 3 );
}

void monster_skullrebel::Torso_Pain() {
	string animname;
	float nextpain;
	float currenttime;
	
	animname = getPainAnim();
	playAnim( ANIMCHANNEL_TORSO, animname );

	nextpain = sys.getTime() + 0.25;
	
	while( !animDone( ANIMCHANNEL_TORSO, 3 ) ) {
		if ( AI_PAIN ) {
			currenttime = sys.getTime();
			if ( currenttime > nextpain ) {
				animState( ANIMCHANNEL_TORSO, "Torso_Pain", 8 );
			}
		}
		waitFrame();
	}

	finishAction( "pain" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 8 );
}

void monster_skullrebel::Torso_MeleeAttack() {
	playAnim( ANIMCHANNEL_TORSO, "melee_attack" );

	while( !animDone( ANIMCHANNEL_TORSO, 8 ) ) {
		waitFrame();
	}
	
	finishAction( "melee_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 8 );
}

/***********************************************************************

	Legs animation control

***********************************************************************/

void monster_skullrebel::Legs_Idle() {
	idleAnim( ANIMCHANNEL_LEGS, "idle" );

	eachFrame {
		if ( can_run && run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 8 ); }
		if ( AI_FORWARD )					{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 8 ); }
	}
}

void monster_skullrebel::Legs_Walk() {
	playCycle( ANIMCHANNEL_LEGS, "walk" );
	
	eachFrame {
		if ( can_run && run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 8 ); }
		if ( !AI_FORWARD )					{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 ); }
	}
}

void monster_skullrebel::Legs_Run() {
	playCycle( ANIMCHANNEL_LEGS, "run" );
	
	eachFrame {
		if ( !run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 8 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 ); }
	}
}

/***********************************************************************

	AI

***********************************************************************/

/*
=====================
monster_skullrebel::init
=====================
*/
void monster_skullrebel::init() {
	run_distance	= SKULLREBEL_RUNDISTANCE;
	walk_turn		= SKULLREBEL_WALKTURN;

	can_run = hasAnim( ANIMCHANNEL_LEGS, "run" );
	setState( "state_Begin" );
}

/*
=====================
monster_skullrebel::state_Begin
=====================
*/
void monster_skullrebel::state_Begin() {
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 8 );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 );

	monster_begin();
	setMoveType( MOVETYPE_ANIM );		
	setState( "state_Idle" );
}

/*
=====================
monster_skullrebel::state_Idle
=====================
*/
void monster_skullrebel::state_Idle() {
	wait_for_enemy();
	startSoundShader( "monster_skullrebel_fuckup", 0 );
	setState( "state_Combat" );
}

/***********************************************************************

	attacks

***********************************************************************/

/*
=====================
monster_zombie_base::state_Killed
=====================
*/
void monster_skullrebel::state_Killed() {
	stopMove();

	animState( ANIMCHANNEL_TORSO, "Torso_Death", 0 );
	animState( ANIMCHANNEL_LEGS, "Legs_Death", 0 );

	waitAction( "dead" );
	startSoundShader( "monster_skullrebel_death", 0 );
	stopThinking();
}

/*
=====================
monster_skullrebel::do_attack
=====================
*/
void monster_skullrebel::do_attack( float attack_flags ) {
	if ( attack_flags & ATTACK_MELEE ) {
		combat_melee();
	}
}

/*
=====================
monster_skullrebel::check_attacks
=====================
*/
float monster_skullrebel::check_attacks() {
	float attack_flags;

	attack_flags = 0;
	if ( testMeleeAttack() ) {
		attack_flags |= ATTACK_MELEE;
	}
	
	return attack_flags;
}

/*
=====================
monster_skullrebel::combat_melee
=====================
*/
void monster_skullrebel::combat_melee() {
	lookAtEnemy( 100 );
	faceEnemy();
	animState( ANIMCHANNEL_TORSO, "Torso_MeleeAttack", 8 );
	waitAction( "melee_attack" );
	lookAtEnemy( 1 );
}
