// pre-interaction.crp
//

#include "renderprogs/common.crp"

varying vec4          	var_Vertex; 

varying vec2            	var_TexDiffuse; 
varying vec2            	var_TexNormal; 
varying vec2            	var_TexSpecular; 
varying mat3     			var_TangentToWorldMatrix; 
varying mat4            var_mv;
varying vec4			normal;
VertexProgram 
	attribute vec4          	attr_TexCoord;     
	attribute vec4          	attr_Tangent;     
	attribute vec4          	attr_Binormal;     
	attribute vec4          	attr_Normal;  

	uniform vec4				u_diffuseMatrixS;
	uniform vec4				u_diffuseMatrixT;
	uniform mat4				u_matview;
	//
	// Main - Entry Point
	//
	void main() {
		gl_Position = ftransform( );

		// transform position into world space 
		var_Vertex = (u_matview * gl_Vertex );


		mat4 textureMatrix = mat4( u_diffuseMatrixS, u_diffuseMatrixT, vec4( 0, 0, 1, 0 ), vec4( 0, 0, 0, 1 ) );

		// diffuse map texgen     
		var_TexDiffuse.xy = ( attr_TexCoord ).st; 

		// specular map texgen 
		var_TexSpecular.xy = (attr_TexCoord ).st; 

		// normal map texgen 
		var_TexNormal.xy = ( attr_TexCoord ).st; 
	
		// construct tangent-space-to-world-space 3x3 matrix 
		var_TangentToWorldMatrix = mat3(attr_Tangent.x, attr_Binormal.x, attr_Normal.x,
										attr_Tangent.y, attr_Binormal.y, attr_Normal.y,
										attr_Tangent.z, attr_Binormal.z, attr_Normal.z);  

		var_mv = u_matview;

	}
EndVertexProgram

FragmentProgram
	uniform sampler2D   	u_normalTexture;       
	uniform sampler2D   	u_diffuseTexture;    
	uniform sampler2D   	u_specularTexture;   

	void main( void ) {    
		gl_FragData[0] = texture2D( u_diffuseTexture, var_TexNormal.st );
		gl_FragData[0].a = 1;
		gl_FragData[1].xyz = normalize((texture2D( u_normalTexture, var_TexNormal.st ).xyz * 2 - vec3(1.0,1.0,1.0)) * var_TangentToWorldMatrix);
		gl_FragData[1].a = 1;
		gl_FragData[2] = var_Vertex;
	}
EndFragmentProgram