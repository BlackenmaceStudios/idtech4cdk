// Interaction.crp (c) 2012 BM Studios
//

#include "renderprogs/common.crp"
#include "renderprogs/tr_rprogshared.h"

#ifdef DOOM_FORWARD_RENDERER 
varying vec3          	var_Vertex; 
#endif

varying vec2            	var_TexDiffuse; 
varying vec2            	var_TexNormal; 
varying vec2            	var_TexSpecular; 


#ifdef DOOM_FORWARD_RENDERER
varying vec4            	var_TexLightProj;
varying vec2            	var_TexLightFalloff;
varying mat3     			var_TangentToWorldMatrix; 
varying mat3     			var_TangentToWorldMatrixInv; 
#endif

varying vec4            	var_Color; 
#ifdef DOOM_FORWARD_RENDERER
varying vec3				var_ViewDir;
#endif
varying vec3				var_Normal;

VertexProgram 
	attribute vec4          	attr_TexCoord;     
	attribute vec4          	attr_Tangent;     
	attribute vec4          	attr_Binormal;     
	attribute vec4          	attr_Normal;  
#ifdef DOOM_FORWARD_RENDERER  
	uniform vec4 				u_lightProjectionS; 
	uniform vec4 				u_lightProjectionT; 
	uniform vec4 				u_lightProjectionQ; 
	uniform vec4 				u_lightFalloff; 
	uniform vec4 				u_viewOrigin; 
#endif
	uniform vec4 				u_colorModulate; 
	uniform vec4				u_colorAdd; 
	
	uniform vec4				u_diffuseMatrixS;
	uniform vec4				u_diffuseMatrixT;

	
	//
	// Main - Entry Point
	//
	void main() {
		gl_Position = ftransform( );

		// transform position into world space 
#ifdef DOOM_FORWARD_RENDERER 
		var_Vertex = ( gl_ModelViewMatrix * gl_Vertex ).xyz;
		mat4 textureMatrix = mat4( u_diffuseMatrixS, u_diffuseMatrixT, vec4( 0, 0, 1, 0 ), vec4( 0, 0, 0, 1 ) );
#else
		mat4 textureMatrix = mat4( vec4( 1, 0, 0, 0 ), vec4( 0, 1, 0, 0 ), vec4( 0, 0, 1, 0 ), vec4( 0, 0, 0, 1 ) );
#endif
		

		// diffuse map texgen     
		var_TexDiffuse.xy = ( textureMatrix * attr_TexCoord ).st; 

		// specular map texgen 
		var_TexSpecular.xy = ( textureMatrix * attr_TexCoord ).st; 

		// normal map texgen 
		var_TexNormal.xy = ( textureMatrix  * attr_TexCoord ).st; 
#ifdef DOOM_FORWARD_RENDERER 
		// light projection texgen
		var_TexLightProj.x = dot( u_lightProjectionS, gl_Vertex );
		var_TexLightProj.y = dot( u_lightProjectionT, gl_Vertex );
		var_TexLightProj.w = dot( u_lightProjectionQ, gl_Vertex );

		// light falloff texgen
		var_TexLightFalloff.x = dot( u_lightFalloff, gl_Vertex );

		var_TexLightFalloff.y = 0.5;

		// construct tangent-space-to-world-space 3x3 matrix 
		var_TangentToWorldMatrix = mat3(attr_Tangent.xyz, attr_Binormal.xyz, attr_Normal.xyz);  
		var_TangentToWorldMatrixInv = transpose(var_TangentToWorldMatrix);

		var_Normal = attr_Normal.xyz;
#endif

#ifdef DOOM_FORWARD_RENDERER
		var_ViewDir = var_TangentToWorldMatrixInv * normalize( u_viewOrigin.xyz - var_Vertex ); 

		// primary color 
		var_Color = vec4( 0, 0, 0,0 ) * u_colorModulate + u_colorAdd; 
#else
		

		// primary color 
		var_Color = gl_Color * u_colorModulate + u_colorAdd; 
#endif
		
	}
EndVertexProgram


FragmentProgram


	uniform sampler2D   	u_normalTexture;    
	uniform sampler2D   	u_lightFalloffTexture;    
	uniform sampler2D   	u_lightProjectionTexture;    
	uniform sampler2D   	u_diffuseTexture;    
	uniform sampler2D   	u_specularTexture;   
    uniform sampler2D		u_unlitTransparentTexture;
	

#ifndef DOOM_FORWARD_RENDERER 
	

	uniform sampler2D			u_vertTexture;
	uniform sampler2D   		ShadowMap; 
#else
	uniform vec4 				u_lightOrigin;   
	uniform vec4 				u_diffuseColor;   
	uniform vec4 				u_specularColor;  
#endif

#ifndef DOOM_FORWARD_RENDERER  
	uniform vec4 				u_viewOrigin; 
	uniform mat4				u_viewmat;
#endif



	uniform int diffuseOnly;

	// traditional lambertian blinn-phong lighting model 
	vec4 lightingModel( vec4 diffuse, vec4 specular, vec3 L, vec3 V, vec3 N, vec3 H, vec4 shadow ) { 
	
		float NdotL = clamp( dot( N , L ), 0.1,1.0 ) ;
		float NdotH = pow( max( dot( N, H ), 0.0001 ), 16 )  ;
		
		return (( diffuse * NdotL ) + (specular * NdotH)); 
	} 

	vec4 LightPass( float lightNum, vec4 var_Vertex, vec2 vCurrOffset, vec4 u_lightOrigin, vec4 diffuse, vec4 u_specularColor, vec4 u_lightProjectionS, vec4 u_lightProjectionT, vec4 u_lightProjectionQ, vec4 u_lightFalloff, vec4 shadow ) {
#ifndef DOOM_FORWARD_RENDERER 
		vec4            	var_TexLightProj;
		vec2            	var_TexLightFalloff;



		vec3 N = texture2D( u_normalTexture, var_TexNormal.st).xyz;
		vec3 var_ViewDir = normalize(u_viewOrigin.xyz - var_Vertex.xyz ).xyz;

#endif
		float d2 = length(u_lightOrigin.xyz - var_Vertex.xyz ) *  u_lightProjectionS.x ;


		
		// vCurrOffset *= vec2( 0.3, 0.3 );
	//	vec4 diffuse = texture2D( u_diffuseTexture, var_TexNormal.st + vCurrOffset );

 
		// compute light direction in world space  
		vec4 u_lightOrigin2 = vec4(1,1,1,1) * mat4(u_lightProjectionS, u_lightProjectionT, u_lightProjectionQ, u_lightFalloff );
		float d = length((u_lightOrigin.xyz ) - (var_Vertex.xyz / var_Vertex.w));
		
#ifdef DOOM_FORWARD_RENDERER  
		vec3 L = normalize( u_lightOrigin.xyz - var_Vertex.xyz ); 
#else
	
		vec3 L = normalize(u_lightOrigin.xyz - var_Vertex.xyz ); 
#endif
		//height = height * 0.04f + -0.03f;
        //vec2 newTexCoord = var_TexDiffuse.st + (height * V.xy);
   
		

		// transform normal, view, and light direction
#ifdef DOOM_FORWARD_RENDERER  
		// compute normal in tangent space from normalmap  
		N = normalize(2.0 * ( texture2D( u_normalTexture, var_TexNormal.st + vCurrOffset ).xyz - 0.5 )); 

		N = var_TangentToWorldMatrix * N;
	//	V = var_TangentToWorldMatrix * V;
		L = var_TangentToWorldMatrix * L;
#endif
 		// compute half angle in world space   
		vec3 H = normalize( L + var_ViewDir );   

		// compute the specular term   
#ifdef DOOM_FORWARD_RENDERER 
		vec4 specular = texture2D( u_specularTexture,  var_TexNormal.st + vCurrOffset );
#else
		float s =  texture2D( u_normalTexture, var_TexNormal.st + vCurrOffset ).a;
		vec4 specular = vec4( s, s, s, s );
#endif
		specular *= u_specularColor;

		// compute light projection and falloff 
	//	vec4 lightProjection = texture2DProj( u_lightProjectionTexture, var_TexLightProj.xyw );  
	//	vec4 lightFalloff = texture2D( u_lightFalloffTexture, var_TexLightFalloff );
	
		// compute lighting model
		
		//color *= lightProjection;  
		//color *= lightFalloff;  

		

		

		vec3 dm = normalize(vec3(d,d,d));
		
		vec4 color = lightingModel( diffuse * var_Color , specular * var_Color, L, var_ViewDir, N, H, shadow );
			d = sqrt(d) * 8;
			float atten = 73000 / ( d * d2 + d2 * d * d);
				color *=  atten    ; 

			
			


	

		return  color;
 
		
	}

	// vec4 LightPass( vec4 u_lightOrigin, vec4 u_diffuseColor, vec4 u_specularColor, vec4 u_lightProjectionS, vec4 u_lightProjectionT, vec4 u_lightProjectionQ, vec4 u_lightFalloff )
	
	const float blurSize = 1.0/1024.0; // I've chosen this size because this will result in that every step will be one pixel wide if the RTScene texture is of size 512x512
	const float blurSizeh = 1.0/1024.0; // I've chosen this size because this will result in that every step will be one pixel wide if the RTScene texture is of size 512x512
	vec4 BlurPixelH( sampler2D u_diffuseTexture, vec2 vTexCoord ) { 
	   vec4 sum = vec4(0.0);
 
	   // blur in y (vertical)
	   // take nine samples, with the distance blurSize between them
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x - 4.0*blurSize, vTexCoord.y)) * 0.05;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x - 3.0*blurSize, vTexCoord.y)) * 0.09;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x - 2.0*blurSize, vTexCoord.y)) * 0.12;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x - blurSize, vTexCoord.y)) * 0.15;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y)) * 0.16;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x + blurSize, vTexCoord.y)) * 0.15;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x + 2.0*blurSize, vTexCoord.y)) * 0.12;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x + 3.0*blurSize, vTexCoord.y)) * 0.09;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x + 4.0*blurSize, vTexCoord.y)) * 0.05;

	   return sum;
	}	

	vec4 BlurPixelV( sampler2D u_diffuseTexture,vec2 vTexCoord ) { 
	   vec4 sum = vec4(0.0);
 
	   // blur in y (vertical)
	   // take nine samples, with the distance blurSize between them
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y - 4.0*blurSizeh)) * 0.05;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y - 3.0*blurSizeh)) * 0.09;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y - 2.0*blurSizeh)) * 0.12;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y - blurSizeh)) * 0.15;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y)) * 0.16;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y + blurSizeh)) * 0.15;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y + 2.0*blurSizeh)) * 0.12;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y + 3.0*blurSizeh)) * 0.09;
	   sum += texture2D( u_diffuseTexture, vec2(vTexCoord.x, vTexCoord.y + 4.0*blurSizeh)) * 0.05;
 
	     return sum;
	}


	


	//
	// UnlitTransparent
	//
	vec3 UnlitTransparent() {
		vec4 transparent = texture2D( u_unlitTransparentTexture, var_TexNormal.st ) ;

	

		return transparent.xyz ;
	}

	vec4 CalcBloom()
	{
		vec4 sum = vec4( 0, 0, 0, 0 );
		vec4 sum2 = vec4( 0, 0, 0, 0 );
		vec2 texcoord = var_TexDiffuse;
		int j;
		int i;

		for( i= -2 ;i < 2; i++)
		{
			for (j = -2; j <2; j++)
			{
				sum += BlurPixelV( u_diffuseTexture, texcoord + vec2(i, j)*0.003) * 0.25;  
			   sum += BlurPixelH( u_diffuseTexture, texcoord + vec2(i, j)*0.003) * 0.25;  
			}
		}


	

		vec4 vWeightsBW = vec4 ( 0.4,0.5,0.6,0 );
		vec4 vWeightsSepia = vec4 ( 2.7,2.6,2.7,1 ); 
		vec4 cColor = texture2D( u_diffuseTexture, var_TexNormal.st );



		vec4 bloom = sum*sum*0.1 * cColor;
		bloom += cColor ;


		float  brightness=dot( cColor,vWeightsBW );
		vec4 temp = brightness * vWeightsSepia;

		//vec4 depthrgb = tex2D( depthSample, texcoord );
		//float depthinfluence = pow( depthrgb, 128.0 );

		sum = BlurPixelH( u_diffuseTexture, var_TexDiffuse ) + BlurPixelV( u_diffuseTexture, var_TexDiffuse );
		vec4 res = sum + (bloom ) * temp ;

		vec4 diffuse = texture2D( u_diffuseTexture, var_TexNormal.st );
		return  (res * bloom +bloom  + temp );
	}
	
	//
	// main
	//
	void main( void ) {   
		vec4 color = vec4(0,0,0,1);
		vec4 diffuse = CalcBloom();
		
		
		vec4 var_Shadow = BlurPixelV( ShadowMap, var_TexNormal.st );
		var_Shadow += BlurPixelH( ShadowMap, var_TexNormal.st );

	    var_Shadow.r = clamp( 1 - var_Shadow.r, 0.0, 1) * 0.5;
		if(var_Shadow.r < 0) {
			var_Shadow.r = 0;
		}

		if(var_Shadow.g == 0) {
			var_Shadow = vec4(1,0,0,1);
		}
		

		vec4 var_Vertex = texture2D( u_vertTexture, var_TexNormal.st );
		vec3 N = texture2D( u_normalTexture, var_TexNormal.st).xyz;
		vec3 var_ViewDir = normalize(u_viewOrigin.xyz - var_Vertex.xyz ).xyz;

		

		// Calculate the parallax offset vector max length.
		// This is equivalent to the tangent of the angle between the
		// viewer position and the fragment location.
		float fParallaxLimit = length( var_ViewDir.xy );
		float	fHeightMapScale		= 0.1;
		int		nMaxSamples			= 73;
		int		nMinSamples			= 32;
		
		// Scale the parallax limit according to heightmap scale.
		fParallaxLimit *= fHeightMapScale;	

		// Calculate the parallax offset vector direction and maximum offset.
		vec2 vOffsetDir = normalize( var_ViewDir.xy );
		vec2 vMaxOffset = vOffsetDir * fParallaxLimit;
	
		// Calculate the geometric surface normal vector, the vector from
		// the viewer to the fragment, and the vector from the fragment
		// to the light.

#ifdef DOOM_FORWARD_RENDERER 
		vec3 N = normalize( var_Normal );
		vec3 E = normalize( var_ViewDir.xyz );
#else
		
		vec3 E = normalize( var_ViewDir.xyz );
#endif
		

		// Calculate how many samples should be taken along the view ray
		// to find the surface intersection.  This is based on the angle
		// between the surface normal and the view vector.
		float nNumSamples = mix( nMaxSamples, nMinSamples, dot( E, N ) );
	
		// Specify the view ray step size.  Each sample will shift the current
		// view ray by this amount.
		float fStepSize = 1.0 / nNumSamples;

		vec2 dx, dy;
		dx = dFdx( var_TexDiffuse.xy );
		dy = dFdy( var_TexDiffuse.xy );

		// Initialize the starting view ray height and the texture offsets.
		float fCurrRayHeight = 1.0;	
		vec2 vCurrOffset = vec2( 0, 0 );
		vec2 vLastOffset = vec2( 0, 0 );
	
		float fLastSampledHeight = 1;
		float fCurrSampledHeight = 1;

		float nCurrSample = 0;
		/*
		while ( nCurrSample < nNumSamples )
		{
		   fCurrSampledHeight = texture2DGrad( u_diffuseTexture, var_TexNormal + vCurrOffset, dx, dy ).a;
		   if ( fCurrSampledHeight > fCurrRayHeight )
		   {
			  // Find the relative height delta before and after the intersection.
			  // This provides a measure of how close the intersection is to 
			  // the final sample location.
			  float delta1 = fCurrSampledHeight - fCurrRayHeight;
			  float delta2 = ( fCurrRayHeight + fStepSize ) - fLastSampledHeight;
			  float ratio = delta1/(delta1+delta2);

			  // Interpolate between the final two segments to 
			  // find the true intersection point offset.
			  vCurrOffset = (ratio) * vLastOffset + (1.0-ratio) * vCurrOffset;
			
			  // Force the exit of the while loop
			 nCurrSample = nNumSamples + 1;	
		   }
		   else
		   {
			     // The intersection was not found.  Now set up the loop for the next
				// iteration by incrementing the sample count,
				nCurrSample++;

				// take the next view ray height step,
				fCurrRayHeight -= fStepSize;
			
				// save the current texture coordinate offset and increment
				// to the next sample location, 
				vLastOffset = vCurrOffset;
				vCurrOffset += fStepSize * vMaxOffset;

				// and finally save the current heightmap height.
				fLastSampledHeight = fCurrSampledHeight;
		   }
		}
		*/

		// color += LightPass( 0, var_Vertex, vCurrOffset, vec4( 100000, 100000, 100000, 0), vec4(0.0008, 0.001, 0.009, 0.1), vec4(0.1, 0.3, 0.2, 0.1), vec4(0.1, 0.1, 0.1, 0.1),vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1), vec4(1,1,1,1) );
		//color += LightPass( 0, var_Vertex, vCurrOffset, vec4( 100000, 100000, -100000, 0), vec4(0.01, 0.01, 0.01, 0.1), vec4(0.01, 0.01, 0.01, 0.1), vec4(0.1, 0.1, 0.1, 0.1),vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1), vec4(1,1,1,1) );
		//color += LightPass( 0, var_Vertex, vCurrOffset, vec4( 100000, -100000, 100000, 0), vec4(0.08, 0.08, 0.08, 0.1), vec4(0.02, 0.04, 0.03, 0.1), vec4(0.1, 0.1, 0.1, 0.1),vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1), vec4(1,1,1,1) );
		//color += LightPass( 0, var_Vertex, vCurrOffset, vec4( -100000, 100000, 100000, 0), vec4(0.02, 0.03, 0.02, 0.01), vec4(0.02, 0.04, 0.03, 0.1), vec4(0.1, 0.1, 0.1, 0.1),vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1), vec4(0.1, 0.1, 0.1, 0.1, vec4(1,1,1,1) );

		
		for(int i = 0; i < numLights; i++) {
			float shadow = var_Shadow.r;
			 vec4 lightProjectS = r_lightProjectionS[i];
			 vec4 lightProjectT = r_lightProjectionT[i];

		

			 color += LightPass( i / numLights, var_Vertex, vCurrOffset, vec4(r_lightOrigin[i], 0.0), vec4(r_diffuseColor[i], 0) , vec4(r_diffuseColor[i], 0), lightProjectS, lightProjectT, r_lightProjectionQ[i], r_lightFalloff[i], vec4(1,1,1,1) )  ;
		}
		


		//gl_FragColor = (color + 0.4) * var_Shadow * vec4(1,1,1,1) ;
		gl_FragColor.xyz = color.xyz * diffuse.xyz * (var_Shadow.r + 0.3); //((color.xyz)    ) + (UnlitTransparent()) ;
	
		gl_FragColor.a = 1;
	}

EndFragmentProgram


/*
void main( void ) {    
		float height = texture2D( u_normalTexture, var_TexNormal.st ).z;

		// compute view direction in world space   
		vec3 V = normalize( u_viewOrigin.xyz - var_Vertex ); 
 
		// compute light direction in world space   
		vec3 L = normalize( u_lightOrigin.xyz - var_Vertex ); 

		height = height * 0.04f + -0.03f;
        vec2 newTexCoord = var_TexDiffuse.st + (height * V.xy);
   
		// compute normal in tangent space from normalmap   
		vec3 N = normalize(2.0 * ( texture2D( u_normalTexture, newTexCoord ).xyz - 0.5 )); 
	
		// transform normal, view, and light direction  
		N = var_TangentToWorldMatrix * N;
		V = var_TangentToWorldMatrix * V;
		L = var_TangentToWorldMatrix * L;
 
 		// compute half angle in world space   
		vec3 H = normalize( L + V );   

		// compute the diffuse term
		vec4 diffuse = texture2D( u_diffuseTexture, newTexCoord );
		diffuse *= u_diffuseColor;

		// compute the specular term   
		vec4 specular = texture2D( u_specularTexture, newTexCoord );
		specular *= u_specularColor;

		// compute light projection and falloff 
		vec4 lightProjection = texture2DProj( u_lightProjectionTexture, var_TexLightProj.xyw );  
		vec4 lightFalloff = texture2D( u_lightFalloffTexture, var_TexLightFalloff );
	
		// compute lighting model
		vec4 color = lightingModel( diffuse, specular, L, V, N, H );
		color *= lightProjection;  
		color *= lightFalloff;  
		color *= var_Color;  
 
		// output final color
		gl_FragColor = color;   

	}
*/